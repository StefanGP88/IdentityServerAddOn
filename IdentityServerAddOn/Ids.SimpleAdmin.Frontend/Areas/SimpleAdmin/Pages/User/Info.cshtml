@page "{id?}"
@model Ids.SimpleAdmin.Frontend.Areas.SimpleAdmin.Pages.User.InfoModel
@{
    Layout = "_NestedInfoLayout";
    var claimsDisplay = "User Claims";
    var claims = claimsDisplay.ToLowerNoSpaces();

    var rolesDisplay = "User Roles";
    var roles = rolesDisplay.ToLowerNoSpaces();
}

@section NavTabs{
    <a class="nav-item nav-link" id="@(roles)tab" data-toggle="tab" href="#@roles" role="tab">@rolesDisplay</a>
    <a class="nav-item nav-link" id="@(claims)tab" data-toggle="tab" href="#@claims" role="tab">@claimsDisplay</a>
}
@section Basesettings{
    <input type="hidden" name="dto.ConcurrencyStamp" value="@Model?.Data?.ConcurrencyStamp" />
    <input type="hidden" name="dto.Id" value="@Model?.Data?.Id" />
    <div class="form-group">
        <label class="col-form-label">Name</label>
        <input type="text" class="form-control" name="dto.UserName" value="@Model?.Data?.UserName">
        <partial name="_ValidationNotification" model="@ModelState["dto.UserName"]" />
    </div>
    @if (!string.IsNullOrWhiteSpace(Model?.Data?.NormalizedUserName))
    {
        <div class="form-group">
            <label class="col-form-label">Normalized name</label>
            <input type="text" class="form-control" name="dto.NormalizedUserName" value="@Model?.Data?.NormalizedUserName" disabled>
            <partial name="_ValidationNotification" model="@ModelState["dto.NormalizedUserName"]" />
        </div>
    }
    <div class="form-group">
        <label class="col-form-label">Email</label>
        <input type="text" class="form-control" name="dto.Email" value="@Model?.Data?.Email">
        <partial name="_ValidationNotification" model="@ModelState["dto.Email"]" />
    </div>
    @if (!string.IsNullOrWhiteSpace(Model?.Data?.NormalizedEmail))
    {
        <div class="form-group">
            <label class="col-form-label">Normalized email</label>
            <input type="text" class="form-control" name="dto.NormalizedEmail" value="@Model?.Data?.NormalizedEmail" disabled>
            <partial name="_ValidationNotification" model="@ModelState["dto.NormalizedEmail"]" />
        </div>
    }
    <div class="form-group">
        <label class="col-form-label">Set password</label>
        <input type="text" class="form-control" name="dto.SetPassword" value="@Model?.Data?.SetPassword">
        <partial name="_ValidationNotification" model="@ModelState["dto.SetPassword"]" />
    </div>
    <div class="form-group">
        <label class="col-form-label">Phone number</label>
        <input type="text" class="form-control" name="dto.PhoneNumber" value="@Model?.Data?.PhoneNumber">
        <partial name="_ValidationNotification" model="@ModelState["dto.PhoneNumber"]" />
    </div>
    <fieldset class="form-group">
        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="enabled" name="dto.EmailConfirmed" value="True" @Model?.Data?.EmailConfirmed.IsChecked() />
            <label class="form-check-label">Email confirmed</label>
        </div>
        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="enabled" name="dto.PhoneNumberConfirmed" value="True" @Model?.Data?.PhoneNumberConfirmed.IsChecked() />
            <label class="form-check-label">Phone number confirmed</label>
        </div>
        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="enabled" name="dto.TwoFactorEnabled" value="True" @Model?.Data?.TwoFactorEnabled.IsChecked() />
            <label class="form-check-label">Two factor enabled</label>
        </div>
    </fieldset>
    <fieldset class="form-group">
        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="enabled" name="dto.LockoutEnabled" value="True" @Model?.Data?.LockoutEnabled.IsChecked() />
            <label class="form-check-label">Lockout enabled</label>
        </div>
    </fieldset>
    <div class="form-group">
        <label class="col-form-label">Lockout end</label>
        <input type="datetime-local" class="form-control" name="dto.LockoutEnd" value="@Model?.Data?.LockoutEnd">
        <partial name="_ValidationNotification" model="@ModelState["dto.LockoutEnd"]" />
    </div>
    <div class="form-group">
        <label class="col-form-label">Access failed count</label>
        <input type="number" class="form-control" name="dto.AccessFailedCount" value="@Model?.Data?.AccessFailedCount">
        <partial name="_ValidationNotification" model="@ModelState["dto.AccessFailedCount"]" />
    </div>
}


@section ResourceProperties{
    @{
        RenderTabPanel(claims,
            Model?.Data?.UserClaims,
            new List<string> { "Claim type", "Claim value" });
    }
    <div class="tab-pane fade" id="@roles" role="tabpanel">
        <fieldset class="form-group">
            @{
                foreach (var item in Model?.Roles?.Items)
                {
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" id="enabled" name="dto.UserRoles['@item.Id']" value="True" @(Model?.Data?.UserRoles?.Any(x => x == item.Id).IsChecked()) />
                        <label class="form-check-label">@item.Name</label>
                    </div>
                }
            }
        </fieldset>
    </div>
}

@functions {
    void RenderTableBody<T>(string name, List<T> list)
    {
        <tbody id="@name.AsTableBody()">
            @if (list != null)
            {
                foreach (var item in list)
                {
                    Html.RenderPartialAsync("TableRowPartials/_" + name.FirstLetterToUpper(), item);
                }
            }
        </tbody>
    }
    void RenderTabPanel<T>(string name, List<T> list, List<string> columns)
    {
        <div class="tab-pane fade" id="@name" role="tabpanel">
            <br />
            <table class="table table-striped border border-dark">
                @{
                    Html.RenderPartialAsync("_Tableheader", columns);
                    RenderTableBody(name, list);
                }
            </table>
            <button type="button" class="btn btn-primary" onclick="AppendTableRow(this, '@name', '@name.AsTableBody()')"></button>
        </div>
    }
}
