@model ClientGrantTypesContract
@{
    var validationResult = _validator.Validate(Model);
    var idx = Guid.NewGuid();
    var disabled = (!Model.IsNull() && validationResult.IsValid) ? "readonly" : string.Empty;
    var disabledClass = (!Model.IsNull() && validationResult.IsValid) ? "border-0 bg-transparent" : string.Empty;
    var disabledBtn = (!Model.IsNull() && validationResult.IsValid) ? "btn-info" : "btn-success";
}
<tr>
    <td>
        <button type="button" class="btn  @disabledBtn btn-block" onclick="ToggleEdit(this, 'GrantTypes');"></button>
    </td>
    <td>
        <input type="hidden" name="dto.GrantTypes.index" value="@idx" />
        <input type="hidden" name="dto.GrantTypes[@idx].Id" value="@Model?.Id" />
        <input type="hidden" name="dto.GrantTypes[@idx].ClientId" value="@Model?.ClientId" />
        <input type="text"
               name="dto.GrantTypes[@idx].GrantType"
               value="@Model?.GrantType"
               class="form-control @disabledClass" @disabled />
        <partial name="_ValidationNotificationPartial" model="@validationResult["GrantType"]" />
    </td>
    <td>
        <button type="button"
                class="btn btn-outline-danger btn-block float-right"
                onclick="SetRemoveModal(this, 'dto.GrantTypes[@idx].GrantType');"
                data-toggle="modal" data-target="#removeRowModal">
        </button>
    </td>
</tr> 